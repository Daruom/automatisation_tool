#!/bin/bash
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
NORMAL="\033[0;39m"
clear
target="None"
my_head()
{
	echo -e Â¤$BIPurple"--------------------------------------------------------------------------------------------------------------"
					 		echo -e " Automation tool for Unix Tasks!!\c"
							echo -e " \tTarget server : $target"
							echo -e "---------------------------------------------------------------------------------------------------------------"$NORMAL
}

while true
do
	my_head
	echo -e $BIRed"\n Please select your choice from below menu \n"
	echo -e " 1. Pre-validation \n"
	echo -e " 2. User Administration \n"
	echo -e " 3. Run AD Hoc Commands \n"
  echo -e " 5. Health Check Statistics \n "
	echo -e " 10. Select target servers\n"
	echo -e " 0. Exit \n"$NORMAL
	read aux
	case $aux in

	0)
	break
	;;
	1)
	if [ $target = "None" ]; then
		echo -e "Select Target servers from option 10"
		read dummy
	else
	cat pre_validation.yml | sed "s/abcz/$target/g" > pre_validation_with_server.yml
	ansible-playbook pre_validation_with_server.yml -K -v
	sleep 2
fi
	;;
	2)
	if [ $target = "None" ]; then
		echo -e "Select Target servers from option 10"
		read dummy
	else
	while true
	do
		echo -e $BIPurple" 1. User Creation \n"
		echo -e " 2. User Removal \n"
		echo -e " 3. Password reset\n"
		echo -e " 0. Exit \n"$NORMAL
		read menu2
		case $menu2 in

			0)
			clear
			break
			;;
			1)
			cat user_creation.yml | sed "s/abcz/$target/g" > user_creation_with_server.yml
			#cat roles/add_sudoers/tasks/add_sudoers_template.yml | sed "s/abcz/$target/g" > roles/add_sudoers/tasks/main.yml
			python user_credentials.py
			;;
			2)
			cat user_remove.yml | sed "s/abcz/$target/g" > user_remove_with_server.yml
			python user_credentials_removal.py
			;;
			3)
			cat password_reset.yml | sed "s/abcz/$target/g" > password_reset_with_server.yml
			python password_credentials.py
			;;
			*)
			echo -e " Wrong choice ! \n"
			read dummy
			continue
			;;
		esac
	done
fi
	;;
	3)
	if [ $target = "None" ]; then
		echo -e "Select Target servers from option 10"
		read dummy
	else
	echo "Welcome to AD Hoc Commands"
	sleep 2
fi
	;;
  #########

	5)
				 if [ $target  = "None" ] ; then
								 echo -e "Select Target Servers from Option 10"
								 read dummy
					else
						cat install_sysstat.yml | sed "s/abcz/$target/g" > install_sysstat_final.yml
						ansible-playbook install_sysstat_final.yml -K -v 
					while true
					do
								 echo -e "    "
								 echo -e $BIPurple" 1. Memory Utilization \n "
													echo -e " 2. CPU Utilization \n "
													echo -e " 3. Overall I/O Activities \n"
													echo -e " 4. Reports run queue and load average \n"
													echo -e " 5. Report network statistics \n"
													echo -e " 6. Top CPU Consuming Process \n"
													echo -e " 7. Top Memory Consuming Process \n"
													echo -e " 8. Shared Memory Statistic \n"
													echo -e " 0. Exit \n "$NORMAL
													echo -e " Enter your Choice : \c"
								 read cho in
								 case $cho in

												 0)
															clear
															break
															 ;;
												 1)
													clear
echo -e $BIYellow"######################################################################" $NORMAL
echo -e $BIGreen"Real Live Memory Utilization Report###################################" $NORMAL
echo -e $BIYellow"######################################################################" $NORMAL
												 echo "  "
												 ansible $target -m shell -a "sar -r 1 3"
												 echo "  "
echo -e "kbmemfree: This shows the amount of free memory"
echo -e "Kbmemused: Memory used"
echo -e "%memused:  Percentage of memory used"
echo -e "kbbuffers: Buffer memory used by the kernel"
echo -e "kbcached:  Cached memory used by the kernel"
echo -e "Most likely you\92ll focus on 'kbmemfree' and 'kbmemused' for free and used memory. \n"
												sleep 5
												clear
												;;
												 2)
												 clear
echo -e $BIYellow"######################################################################" $NORMAL
echo -e $BIGreen"Real Live CPU Utilization Report #####################################" $NORMAL
echo -e $BIYellow"######################################################################" $NORMAL
												echo -e "  "
												ansible $target -m shell -a "sar -u 1 3"
												echo -e "  "
echo -e "%user   :This shows the total time that the processor is spending on different process"
echo -e "%sys    :This shows the percentage of time spend by the processor for operating system tasks"
echo -e "%iowait :The name iowait itself suggests that its the time spend by processor waiting for devices(input and output)"
echo -e "%steal  :This column shows the amount to time spend by a CPU (which is virtualized), for resources from the physical CPU"
echo -e "%idle   :This suggests the idle time spend by the processor \n"
												sleep 5
												clear
												;;
												3)
												clear
echo -e $BIYellow"######################################################################" $NORMAL
echo -e $BIGreen"Overall I/O Activities Report ########################################" $NORMAL
echo -e $BIYellow"######################################################################" $NORMAL
												echo " "
												ansible $target -m shell -a "sar -b 1 3"
												ansible $target -m shell -a "sar -p -d 1 1"

echo -e "rd_sec/s: This shows you the total number of sectors on that device which is being read"
echo -e "wr_sec/s: If rd_sec/s is sectors being read per second then obviously wr_sec is sectors being written per second"
echo -e "avgrq-sz: This column shows the average"
echo -e "await   : This shows the total number of time that the processor waited for requests regarding IO"
echo -e "%util   : This column shows the usage of cpu in percentage when the request was generated"
echo -e "tps     : Transactions per second (this includes both read and write)"
echo -e "rtps    : Read transactions per second"
echo -e "wtps    : Write transactions per second"
echo -e "bread/s : Bytes read per second"
echo -e "bwrtn/s : Bytes written per second \n"
												 sleep 5
												 clear
												;;
												4)
												clear
echo -e $BIYellow"######################################################################" $NORMAL
echo -e $BIGreen"Run queue and Load average Report ####################################" $NORMAL
echo -e $BIYellow"######################################################################" $NORMAL
											 echo " "
											 ansible $target -m shell -a "sar -q 1 3"
echo -e "This reports the run queue size and load average of last 1 minute, 5 minutes, and 15 minutes. '1 3' reports for every 1 seconds a total of 3 times. \n"
											 sleep 5
											 clear
											 ;;
											 5)
											 clear
echo -e $BIYellow"######################################################################" $NORMAL
echo -e $BIGreen"Report network statistics ############################################" $NORMAL
echo -e $BIYellow"######################################################################" $NORMAL
											echo " "
											ansible $target -m shell -a "sar -n DEV 1 1"
											echo " "
echo -e "IFACE   :Stands for the nic card interface name"
echo -e "rxpck/s :This shows the total packets received per second"
echo -e "txpck/s :Transmitted packets per second"
echo -e "rxcmp/s :Compressed packets received"
echo -e "txcmp/s :Compressed packets transmitted"
echo -e "rxmcst/s:Packets multicasted per second \n"
											echo " "
											sleep 5
											clear
											;;
											6)
											clear
echo -e $BIYellow"######################################################################" $NORMAL
echo -e $BIGreen"Top CPU Consuming Process ############################################" $NORMAL
echo -e $BIYellow"######################################################################" $NORMAL
											echo " "
											ansible $target -m shell -a "ps -eo pid,user,ppid,cmd,%mem,%cpu --sort=-%cpu | head"
											echo " "
											sleep 5
											clear
											;;
											7)
											clear
echo -e $BIYellow"######################################################################" $NORMAL
echo -e $BIGreen"Top Memory Consuming Process #########################################" $NORMAL
echo -e $BIYellow"######################################################################" $NORMAL
											echo " "
											ansible $target -m shell -a "ps -eo rss,vsz,pid,cputime,cmd --width 100 --sort rss,vsz | tail --lines 10"
											echo " "
											sleep 5
											clear
											;;
											8)
											clear
echo -e $BIYellow"######################################################################" $NORMAL
echo -e $BIGreen"Shared Memory Statistics #############################################" $NORMAL
echo -e $BIYellow"######################################################################" $NORMAL
											echo " "
											ansible $target -m shell -a "ipcs -ma"
											echo " "
											sleep 5
											clear
											;;
											*)
											echo -e "Wrong Choice !!!!"
											read dummy
											continue
											;;
											esac
										done
									fi
;;



	#########
	10)
	while true
	do
		clear
		my_head
		echo -e "1. Target Server \n"
		echo -e "0. Exit \n"
		echo -e " Enter your choice: \c"
		read cho
		case $cho in
			0)
			clear
			break
			;;
			1)
			echo -e "---------------------------------------------------------------------------------------------------"
			echo -e "Available Env : ALL -> for ALL servers in this environment"
			cat /etc/ansible/hosts | grep "\[" | sed "s/\[/ /g" | sed "s/\]/ /g" | sed "s/\ / /g"
			echo -e "---------------------------------------------------------------------------------------------------"
			echo -e "Enter your choice: \c"
			read target
			;;
			*)
			echo -e "Wrong choice ! \n"
			read dummy
			continue
			;;
		esac
	done
	;;
	*)
	echo -e "Wrong choice ! \n"
	read dummy
	continue
	;;
	esac
done
